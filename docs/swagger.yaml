basePath: /
definitions:
  dto.APIResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  dto.AuthResponse:
    properties:
      email:
        type: string
      id:
        type: string
      role:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      Error:
        type: string
      Message:
        type: string
      Status:
        example: Error
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 70
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.UploadData:
    properties:
      createdAt:
        type: string
      fileExtension:
        type: string
      filename:
        type: string
      id:
        type: string
      oldFilename:
        type: string
      ownerID:
        type: string
      ownerUsername:
        type: string
      pixelArtDesciption:
        type: string
      pixelArtName:
        type: string
      pixelArtSize:
        format: int64
        type: integer
      pixelArtTags:
        type: string
      pixelArtURL:
        type: string
    type: object
  dto.UploadFileResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UploadData'
      message:
        type: string
      status:
        type: string
    type: object
  dto.UserCreateDataResponse:
    properties:
      CreatedAt:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      ID:
        type: string
      LastName:
        type: string
      Role:
        type: string
      Username:
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        type: string
      firstName:
        maxLength: 20
        minLength: 2
        type: string
      lastName:
        maxLength: 20
        minLength: 2
        type: string
      password:
        maxLength: 70
        minLength: 6
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - username
    type: object
  dto.UserCreateResponse:
    properties:
      Data:
        $ref: '#/definitions/dto.UserCreateDataResponse'
      Message:
        example: Created User
        type: string
      Status:
        example: Success
        type: string
    type: object
  dto.UserGetDataResponse:
    properties:
      CreatedAt:
        type: string
      Email:
        type: string
      FirstName:
        type: string
      ID:
        type: string
      LastName:
        type: string
      Role:
        type: string
      Username:
        type: string
    type: object
  dto.UserGetResponse:
    properties:
      Data:
        $ref: '#/definitions/dto.UserGetDataResponse'
      Message:
        example: Get User
        type: string
      Status:
        example: Success
        type: string
    type: object
  dto.UserUpdateDataResponse:
    properties:
      Email:
        type: string
      FirstName:
        type: string
      ID:
        type: string
      LastName:
        type: string
      Role:
        type: string
      Username:
        type: string
    type: object
  dto.UserUpdateResponse:
    properties:
      Data:
        $ref: '#/definitions/dto.UserUpdateDataResponse'
      Message:
        example: Updated User
        type: string
      Status:
        example: Success
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: lukas.haible@web.de
    name: Lukas Haible
  description: Pixel-BD is an open-source online platform where anyone can upload,
    share, and showcase their pixel art creations with the community.
  title: PixelDB
  version: "0.1"
paths:
  /:
    get:
      description: This is the base route. You can check, if the API is online.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Hello
      tags:
      - Base
  /auth/login:
    post:
      description: Login with your credentials, to get your User Data and your JWT-Token
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
      summary: Login
      tags:
      - Auth
  /pixelart:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of pixel art
      parameters:
      - description: Size of each Page
        in: query
        name: size
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Get pixel art list
      tags:
      - PixelArt
    post:
      description: Returns a paginated list of pixel art
      parameters:
      - description: PixelArt-File
        in: formData
        name: pixelart
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UploadFileResponse'
      security:
      - BearerAuth: []
      summary: Upload PixelArt
      tags:
      - PixelArt
  /pixelart/{pixelArtID}:
    get:
      description: Returns the infos for a specific pixel art by ID
      parameters:
      - description: PixelArt ID
        in: path
        name: pixelArtID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: file
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get PixelArt
      tags:
      - PixelArt
  /pixelart/{pixelArtID}/picture:
    get:
      description: Returns the image for a specific pixel art by ID
      parameters:
      - description: PixelArt ID
        in: path
        name: pixelArtID
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            type: file
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get PixelArt Picture
      tags:
      - PixelArt
  /user:
    get:
      description: Get the user Data, when passing your JWT-Token in the Heeader
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserGetResponse'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - User
    patch:
      description: Update the User Data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserUpdateResponse'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - User
    post:
      description: Creates a new user account by accepting user details such as username,
        email, password, firstname and lastname.
      parameters:
      - description: User Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create User
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
